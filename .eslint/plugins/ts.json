{
  "env": {},
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "tsconfigRootDir": "./",
    "project": "tsconfig.json"
  },
  "plugins": [ "@typescript-eslint" ],
  "extends": [ "plugin:@typescript-eslint/recommended" ],
  "overrides": [{
    "files": [ "*.ts", "*.tsx" ],
    "excludedFiles": [ "*.js", "*.jsx", "*.mjs" ],
    "rules": {
      "consistent-return": "off",
      "no-bitwise": "off",
      "int32Hint": "off",
      "indent": "off",
      "brace-style": "off",
      "comma-dangle": "off",
      "comma-spacing": "off",
      "default-param-last": "off",
      "dot-notation": "off",
      "func-call-spacing": "off",
      "init-declarations": "off",
      "keyword-spacing": "off",
      "lines-between-class-members": "off",
      "no-array-constructor": "off",
      "no-dupe-class-members": "off",
      "no-duplicate-imports": "off",
      "no-empty-function": "off",
      "no-extra-parens": "off",
      "no-extra-semi": "off",
      "no-implied-eval": "off",
      "no-invalid-this": "off",
      "no-loop-func": "off",
      "no-loss-of-precision": "off",
      "no-magic-numbers": "off",
      "no-redeclare": "off",
      "no-shadow": "off",
      "no-throw-literal": "off",
      "no-unused-expressions": "off",
      "no-unused-vars": "off",
      "no-use-before-define": "off",
      "no-useless-constructor": "off",
      "object-curly-spacing": "off",
      "quotes": "off",
      "require-await": "off",
      "no-return-await": "off",
      "semi": "off",
      "space-before-blocks": "off",
      "space-before-function-paren": "off",
      "space-infix-ops": "off",
      "@typescript-eslint/adjacent-overload-signatures": "error",
      "@typescript-eslint/array-type": [ "error", {
        "default": "array",
        "readonly": "array"
      }],
      "@typescript-eslint/await-thenable": "error",
      "@typescript-eslint/ban-ts-comment":[ "error", {
        "ts-ignore": "allow-with-description",
        "minimumDescriptionLength": 10
      }],
      "@typescript-eslint/ban-tslint-comment": "error",
      "@typescript-eslint/ban-types": [ "error", {
        "types": {
          "Array": {
            "message": "Use [] instead",
            "fixWith": "[]"
          },
          "Boolean": {
            "message": "Use boolean instead",
            "fixWith": "boolean"
          },
          "Number": {
            "message": "Use number instead",
            "fixWith": "number" 
          },
          "function": "Do not use Function",
          "String": {
            "message": "Use string instead",
            "fixWith": "string"
          },
          "{}": {
            "message": "Use object instead",
            "fixWith": "object"
          }  
        }
      }],
      "@typescript-eslint/brace-style": "error",
      "@typescript-eslint/class-literal-property-style": "error",
      "@typescript-eslint/comma-dangle": [ "error", {
        "arrays": "never",
        "enums": "never",
        "exports": "never",
        "functions": "never",
        "generics": "never",
        "imports": "never",
        "objects": "never",
        "tuples": "never"
      }],
      "@typescript-eslint/comma-spacing": [ "error", {
        "before": false,
        "after": true
      }],
      "@typescript-eslint/consistent-indexed-object-style": [ "error", "record" ],
      "@typescript-eslint/consistent-type-assertions": [ "error", {
        "assertionStyle": "as",
        "objectLiteralTypeAssertions": "never"
      }],
      "@typescript-eslint/consistent-type-definitions": [ "error", "interface" ],
      "@typescript-eslint/consistent-type-exports": [ "error", {
        "fixMixedExportsWithInlineTypeSpecifier": false
      }],
      "@typescript-eslint/consistent-type-imports": [ "error", {
        "disallowTypeAnnotations": true,
        "prefer": "type-imports"
      }],
      "@typescript-eslint/default-param-last": "error",
      "@typescript-eslint/dot-notation": [ "error", {
        "allowIndexSignaturePropertyAccess": false,
        "allowKeywords": true,
        "allowPattern": "^delete$",
        "allowPrivateClassPropertyAccess": false,
        "allowProtectedClassPropertyAccess": false
      }],
      "@typescript-eslint/explicit-function-return-type": [ "error", {
        "allowExpressions": true,
        "allowTypedFunctionExpressions": true,
        "allowHigherOrderFunctions": false,
        "allowDirectConstAssertionInArrowFunctions": false,
        "allowConciseArrowFunctionExpressionsStartingWithVoid": false
      }],
      "@typescript-eslint/explicit-member-accessibility": [ "error", {
        "accessibility": "explicit",
        "overrides": {
          "accessors": "explicit",
          "constructors": "no-public",
          "methods": "explicit",
          "properties": "explicit",
          "parameterProperties": "explicit"
        }
      }],
      "@typescript-eslint/explicit-module-boundary-types": [ "error", {
        "allowArgumentsExplicitlyTypedAsAny": false,
        "allowDirectConstAssertionInArrowFunctions": false,
        "allowedNames": [],
        "allowHigherOrderFunctions": true,
        "allowTypedFunctionExpressions": true
      }],
      "@typescript-eslint/func-call-spacing": [ "error", "never" ],
      "@typescript-eslint/indent": [ "error", 2, {
        "flatTernaryExpressions": false,
        "ignoredNodes": [],
        "ignoreComments": false,
        "offsetTernaryExpressions": true,
        "outerIIFEBody": 1,
        "ArrayExpression": 1,
        "CallExpression": {
          "arguments": 1
        },
        "FunctionDeclaration": {
          "body": 1,
          "parameters": 1
        },
        "FunctionExpression": {
          "body": 1,
          "parameters": 1
        },
        "ImportDeclaration": 1,
        "MemberExpression": 1,
        "ObjectExpression": 1,
        "SwitchCase": 1,
        "VariableDeclarator": "first"
      }],
      "@typescript-eslint/init-declarations": [ "error", "never", {
        "ignoreForLoopInit": true
      }],
      "@typescript-eslint/keyword-spacing": [ "error", {
        "after": true,
        "before": true,
        "overrides": {}
      }],
      "@typescript-eslint/lines-between-class-members": [ "error", "always", {
        "exceptAfterOverload": true,
        "exceptAfterSingleLine": true
      }],
      "@typescript-eslint/member-delimiter-style": [ "error", {
        "multiline": {
            "delimiter": "semi",
            "requireLast": true
        },
        "singleline": {
            "delimiter": "semi",
            "requireLast": true
        }
      }],
      "@typescript-eslint/member-ordering": [ "error", {
        "default": [
          "signature",
          
          "public-static-field",
          "protected-static-field",
          "private-static-field",

          "public-decorated-field",
          "protected-decorated-field",
          "private-decorated-field",

          "public-instance-field",
          "protected-instance-field",
          "private-instance-field",

          "public-abstract-field",
          "protected-abstract-field",
          "private-abstract-field",

          "public-field",
          "protected-field",
          "private-field",

          "static-field",
          "instance-field",
          "abstract-field",

          "decorated-field",

          "field",

          "public-constructor",
          "protected-constructor",
          "private-constructor",

          "constructor",

          "public-static-method",
          "protected-static-method",
          "private-static-method",

          "public-decorated-method",
          "protected-decorated-method",
          "private-decorated-method",

          "public-instance-method",
          "protected-instance-method",
          "private-instance-method",

          "public-abstract-method",
          "protected-abstract-method",
          "private-abstract-method",

          "public-method",
          "protected-method",
          "private-method",

          "static-method",
          "instance-method",
          "abstract-method",

          "decorated-method",

          "method"
        ]
      }],
      "@typescript-eslint/method-signature-style": [ "error", "property" ],
      "@typescript-eslint/naming-convention": [ "error", {
        "selector": "default",
        "format": [ "camelCase" ],
        "leadingUnderscore": "forbid",
        "trailingUnderscore": "forbid"
      }, {
        "selector": "variable",
        "format": [ "camelCase", "UPPER_CASE" ],
        "leadingUnderscore": "forbid",
        "trailingUnderscore": "forbid"
      }, {
        "selector": "parameter",
        "format": [ "camelCase" ],
        "leadingUnderscore": "allow",
        "trailingUnderscore": "forbid"
      }, {
        "selector": "typeLike",
        "format": [ "PascalCase" ]
      }],
      "@typescript-eslint/no-array-constructor": "error",
      "@typescript-eslint/no-base-to-string": [ "error", {
        "ignoredTypeNames": []
      }],
      "@typescript-eslint/no-confusing-non-null-assertion": "error",
      "@typescript-eslint/no-confusing-void-expression": [ "error",  {
        "ignoreArrowShorthand": false,
        "ignoreVoidOperator": false
      }],
      "@typescript-eslint/no-dupe-class-members": "error",
      "@typescript-eslint/no-duplicate-imports": [ "error", {
        "includeExports": true
      }],
      "@typescript-eslint/no-dynamic-delete": "error",
      "@typescript-eslint/no-empty-function": [ "error", {
        "allow": []
      }],
      "@typescript-eslint/no-empty-interface": [ "error", {
        "allowSingleExtends": false
      }],
      "@typescript-eslint/no-explicit-any": [ "error", {
        "fixToUnknown": false,
        "ignoreRestArgs": false
      }],
      "@typescript-eslint/no-extra-non-null-assertion": "error",
      "@typescript-eslint/no-extra-parens": [ "error", "all", {
        "conditionalAssign": false,
        "enforceForArrowConditionals": true,
        "enforceForFunctionPrototypeMethods": false,
        "enforceForNewInMemberExpressions": false,
        "enforceForSequenceExpressions": false,
        "returnAssign": true,
        "nestedBinaryExpressions": false,
        "ignoreJSX": "all"
      }],
      "@typescript-eslint/no-extra-semi": "error",
      "@typescript-eslint/no-extraneous-class": [ "error", {
        "allowConstructorOnly": false,
        "allowEmpty": false,
        "allowStaticOnly": false,
        "allowWithDecorator": false
      }],
      "@typescript-eslint/no-floating-promises": [ "error", {
        "ignoreVoid": true,
        "ignoreIIFE": false
      }],
      "@typescript-eslint/no-for-in-array": "error",
      "@typescript-eslint/no-implicit-any-catch": [ "error", {
        "allowExplicitAny": false
      }],
      "@typescript-eslint/no-implied-eval": "error",
      "@typescript-eslint/no-inferrable-types": [ "error", {
        "ignoreParameters": false,
        "ignoreProperties": false
      }],
      "@typescript-eslint/no-invalid-this": [ "error", {
        "capIsConstructor": false
      }],
      "@typescript-eslint/no-invalid-void-type": [ "error", {
        "allowInGenericTypeArguments": true,
        "allowAsThisParameter": false
      }],
      "@typescript-eslint/no-loop-func": "error",
      "@typescript-eslint/no-loss-of-precision": "error",
      "@typescript-eslint/no-magic-numbers": [ "off", {
        "detectObjects": false,
        "enforceConst": true,
        "ignore": [],
        "ignoreArrayIndexes": true,
        "ignoreDefaultValues": true,
        "ignoreEnums": true,
        "ignoreNumericLiteralTypes": true,
        "ignoreReadonlyClassProperties": true
      }],
      "@typescript-eslint/no-meaningless-void-operator": [ "error", {
        "checkNever": true
      }],
      "@typescript-eslint/no-misused-new": "error",
      "@typescript-eslint/no-misused-promises": [ "error", {
        "checksVoidReturn": false,
        "checksConditionals": false
      }],
      "@typescript-eslint/no-namespace": [ "error", {
        "allowDeclarations": false,
        "allowDefinitionFiles": true
      }],
      "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
      "@typescript-eslint/no-non-null-assertion": "error",
      "@typescript-eslint/no-parameter-properties": "error",
      "@typescript-eslint/no-redeclare": [ "error", {
        "builtinGlobals": true,
        "ignoreDeclarationMerge": false
      }],
      "@typescript-eslint/no-redundant-type-constituents": "error",
      "@typescript-eslint/no-require-imports": "error",
      "@typescript-eslint/no-shadow": [ "error", {
        "allow": [],
        "builtinGlobals": true,
        "hoist": "all",
        "ignoreTypeValueShadow": false,
        "ignoreFunctionTypeParameterNameValueShadow": false
      }],
      "@typescript-eslint/no-this-alias": [ "error", {
        "allowDestructuring": false,
        "allowedNames": [ "self "]
      }],
      "@typescript-eslint/no-throw-literal": [ "error", {
        "allowThrowingAny": false,
        "allowThrowingUnknown": false
      }],
      "@typescript-eslint/no-type-alias": [ "error", {
        "allowAliases": "never",
        "allowCallbacks": "never",
        "allowConditionalTypes": "never",
        "allowConstructors": "never",
        "allowGenerics": "always",
        "allowLiterals": "always",
        "allowMappedTypes": "never",
        "allowTupleTypes": "never"
      }],
      "@typescript-eslint/no-unnecessary-boolean-literal-compare": [ "error", {
        "allowComparingNullableBooleansToTrue": false,
        "allowComparingNullableBooleansToFalse": false
      }],
      "@typescript-eslint/no-unnecessary-condition": [ "error", {
        "allowConstantLoopConditions": false,
        "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": false
      }],
      "@typescript-eslint/no-unnecessary-qualifier": "error",
      "@typescript-eslint/no-unnecessary-type-arguments": "error",
      "@typescript-eslint/no-unnecessary-type-assertion": "error",
      "@typescript-eslint/no-unnecessary-type-constraint": "error",
      "@typescript-eslint/no-unsafe-argument": "error",
      "@typescript-eslint/no-unsafe-assignment": "error",
      "@typescript-eslint/no-unsafe-call": "error",
      "@typescript-eslint/no-unsafe-member-access": "error",
      "@typescript-eslint/no-unsafe-return": "error",
      "@typescript-eslint/no-unused-expressions": [ "error", {
        "allowShortCircuit": false,
        "allowTaggedTemplates": false,
        "allowTernary": false,
        "enforceForJSX": true
      }],
      "@typescript-eslint/no-unused-vars": [ "error", {
        "args": "all",
        "argsIgnorePattern": "^_",
        "ignoreRestSiblings": false,
        "vars": "all",
        "varsIgnorePattern": "^$"
      }],
      "@typescript-eslint/no-use-before-define": [ "error", {
        "classes": false,
        "functions": false,
        "variables": true
      }],
      "@typescript-eslint/no-useless-constructor": "error",
      "@typescript-eslint/no-useless-empty-export": "error",
      "@typescript-eslint/no-var-requires": "error",
      "@typescript-eslint/non-nullable-type-assertion-style": "error",
      "@typescript-eslint/object-curly-spacing": [ "error", "always", {
        "arraysInObjects": true,
        "objectsInObjects": true
      }],
      "@typescript-eslint/prefer-as-const": "error",
      "@typescript-eslint/prefer-enum-initializers": "off",
      "@typescript-eslint/prefer-for-of": "error",
      "@typescript-eslint/prefer-function-type": "error",
      "@typescript-eslint/prefer-includes": "error",
      "@typescript-eslint/prefer-literal-enum-member": [ "error", {
        "allowBitwiseExpressions": false
      }],
      "@typescript-eslint/prefer-namespace-keyword": "error",
      "@typescript-eslint/prefer-nullish-coalescing": [ "error", {
        "ignoreConditionalTests": false,
        "ignoreMixedLogicalExpressions": false
      }],
      "@typescript-eslint/prefer-optional-chain": "error",
      "@typescript-eslint/prefer-readonly": [ "error", {
        "onlyInlineLambdas": true
      }],
      "@typescript-eslint/prefer-readonly-parameter-types": [ "off", {
        "checkParameterProperties": false,
        "ignoreInferredTypes": true,
        "treatMethodsAsReadonly": true
      }],
      "@typescript-eslint/prefer-reduce-type-parameter": "error",
      "@typescript-eslint/prefer-regexp-exec": "error",
      "@typescript-eslint/prefer-return-this-type": "off",
      "@typescript-eslint/prefer-string-starts-ends-with": "error",
      "@typescript-eslint/prefer-ts-expect-error": "error",
      "@typescript-eslint/promise-function-async": [ "error", {
        "allowedPromiseNames": [],
        "checkArrowFunctions": true,
        "checkFunctionDeclarations": true,
        "checkFunctionExpressions": true,
        "checkMethodDeclarations": true
      }],
      "@typescript-eslint/quotes": [ "error", "double", {
        "avoidEscape": true,
        "allowTemplateLiterals": true
      }],
      "@typescript-eslint/require-array-sort-compare": [ "error", {
        "ignoreStringArrays": false
      }],
      "@typescript-eslint/require-await": "error",
      "@typescript-eslint/restrict-plus-operands": [ "error", {
        "checkCompoundAssignments": true,
        "allowAny": false
      }],
      "@typescript-eslint/restrict-template-expressions": [ "error", {
        "allowNumber": true,
        "allowBoolean": false,
        "allowAny": false,
        "allowNullish": false,
        "allowRegExp": false
      }],
      "@typescript-eslint/return-await": [ "error", "in-try-catch" ],
      "@typescript-eslint/semi": [ "error", "always", {
        "omitLastInOneLineBlock": false
      }],
      "@typescript-eslint/sort-type-union-intersection-members": [ "error", {
        "checkIntersections": true,
        "checkUnions": true,
        "groupOrder": [
          "named",
          "keyword",
          "operator",
          "literal",
          "function",
          "import",
          "conditional",
          "object",
          "tuple",
          "intersection",
          "union",
          "nullish"
        ]
      }],
      "@typescript-eslint/space-before-blocks": [ "error", {
        "classes": "always",
        "functions": "always",
        "keywords": "always"
      }],
      "@typescript-eslint/space-before-function-paren": [ "error", {
        "anonymous": "never",
        "asyncArrow": "never",
        "named": "never"
      }],
      "@typescript-eslint/space-infix-ops": [ "error", {
        "int32Hint": true
      }],
      "@typescript-eslint/strict-boolean-expressions": [ "error", {
        "allowString": false,
        "allowNumber": false,
        "allowNullableObject": false,
        "allowNullableBoolean": false,
        "allowNullableString": false,
        "allowNullableNumber": false,
        "allowAny": false,
        "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": false
      }],
      "@typescript-eslint/switch-exhaustiveness-check": "error",
      "@typescript-eslint/triple-slash-reference": [ "error", {
        "path": "never",
        "types": "never",
        "lib": "never"
      }],
      "@typescript-eslint/type-annotation-spacing": [ "error", {
        "before": false,
        "after": true
      }],
      "@typescript-eslint/typedef": [ "error", {
        "arrayDestructuring": false,
        "arrowParameter": false,
        "memberVariableDeclaration": false,
        "objectDestructuring": false,
        "parameter": false,
        "propertyDeclaration": false,
        "variableDeclaration": false,
        "variableDeclarationIgnoreFunction": false
      }],
      "@typescript-eslint/unbound-method": [ "error", {
        "ignoreStatic": true
      }],
      "@typescript-eslint/unified-signatures": "error"
    }
  }]
}
